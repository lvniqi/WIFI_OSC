// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/04/2015 15:46:54"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    FPGA_EP2C
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FPGA_EP2C_vlg_sample_tst(
	clk_in,
	data_in,
	en,
	rst_n,
	sampler_tx
);
input  clk_in;
input [7:0] data_in;
input  en;
input  rst_n;
output sampler_tx;

reg sample;
time current_time;
always @(clk_in or data_in or en or rst_n)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module FPGA_EP2C_vlg_check_tst (
	mosi,
	sclk,
	sync_n,
	sampler_rx
);
input  mosi;
input  sclk;
input  sync_n;
input sampler_rx;

reg  mosi_expected;
reg  sclk_expected;
reg  sync_n_expected;

reg  mosi_prev;
reg  sclk_prev;
reg  sync_n_prev;

reg  mosi_expected_prev;
reg  sclk_expected_prev;
reg  sync_n_expected_prev;

reg  last_mosi_exp;
reg  last_sclk_exp;
reg  last_sync_n_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	mosi_prev = mosi;
	sclk_prev = sclk;
	sync_n_prev = sync_n;
end

// update expected /o prevs

always @(trigger)
begin
	mosi_expected_prev = mosi_expected;
	sclk_expected_prev = sclk_expected;
	sync_n_expected_prev = sync_n_expected;
end



// expected sclk
initial
begin
	sclk_expected = 1'bX;
end 

// expected mosi
initial
begin
	mosi_expected = 1'bX;
end 

// expected sync_n
initial
begin
	sync_n_expected = 1'bX;
end 
// generate trigger
always @(mosi_expected or mosi or sclk_expected or sclk or sync_n_expected or sync_n)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected mosi = %b | expected sclk = %b | expected sync_n = %b | ",mosi_expected_prev,sclk_expected_prev,sync_n_expected_prev);
	$display("| real mosi = %b | real sclk = %b | real sync_n = %b | ",mosi_prev,sclk_prev,sync_n_prev);
`endif
	if (
		( mosi_expected_prev !== 1'bx ) && ( mosi_prev !== mosi_expected_prev )
		&& ((mosi_expected_prev !== last_mosi_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mosi :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mosi_expected_prev);
		$display ("     Real value = %b", mosi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mosi_exp = mosi_expected_prev;
	end
	if (
		( sclk_expected_prev !== 1'bx ) && ( sclk_prev !== sclk_expected_prev )
		&& ((sclk_expected_prev !== last_sclk_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sclk :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sclk_expected_prev);
		$display ("     Real value = %b", sclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sclk_exp = sclk_expected_prev;
	end
	if (
		( sync_n_expected_prev !== 1'bx ) && ( sync_n_prev !== sync_n_expected_prev )
		&& ((sync_n_expected_prev !== last_sync_n_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sync_n :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sync_n_expected_prev);
		$display ("     Real value = %b", sync_n_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sync_n_exp = sync_n_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module FPGA_EP2C_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_in;
reg [7:0] data_in;
reg en;
reg rst_n;
// wires                                               
wire mosi;
wire sclk;
wire sync_n;

wire sampler;                             

// assign statements (if any)                          
FPGA_EP2C i1 (
// port map - connection between master ports and signals/registers   
	.clk_in(clk_in),
	.data_in(data_in),
	.en(en),
	.mosi(mosi),
	.rst_n(rst_n),
	.sclk(sclk),
	.sync_n(sync_n)
);

// clk_in
always
begin
	clk_in = 1'b0;
	clk_in = #5000 1'b1;
	#5000;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b0;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b1;
end 
// data_in[ 5 ]
initial
begin
	data_in[5] = 1'b1;
end 
// data_in[ 4 ]
initial
begin
	data_in[4] = 1'b0;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b0;
end 
// data_in[ 2 ]
initial
begin
	data_in[2] = 1'b1;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b0;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b0;
end 

// en
initial
begin
	en = 1'b0;
	en = #170000 1'b1;
end 

// rst_n
initial
begin
	rst_n = 1'b1;
end 

FPGA_EP2C_vlg_sample_tst tb_sample (
	.clk_in(clk_in),
	.data_in(data_in),
	.en(en),
	.rst_n(rst_n),
	.sampler_tx(sampler)
);

FPGA_EP2C_vlg_check_tst tb_out(
	.mosi(mosi),
	.sclk(sclk),
	.sync_n(sync_n),
	.sampler_rx(sampler)
);
endmodule

